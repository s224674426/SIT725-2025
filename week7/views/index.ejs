<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Products</title>
  <link rel="stylesheet" href="/style.css" />
  <style>
    #status { margin:.5rem 0; padding:.4rem .6rem; border-radius:8px; background:#f5f5f5; display:inline-block; }
  </style>
</head>
<body>
  <h1>Products</h1>
  <div id="status">Connecting…</div>
  <div id="list"></div>

  <form id="form">
    <input name="name" placeholder="name" required />
    <input name="price" type="number" step="0.01" placeholder="price" required />
    <input name="description" placeholder="description" />
    <button type="submit">Add</button>
  </form>

  <!-- Socket.IO client -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const list = document.getElementById('list');
    const form = document.getElementById('form');
    const statusEl = document.getElementById('status');

    function renderList(items){
      list.innerHTML =
        '<ul>' + items.map(p =>
          `<li><strong>${escapeHtml(p.name)}</strong> — $${fmt(p.price)} <em>${escapeHtml(p.description||'')}</em></li>`
        ).join('') + '</ul>';
    }
    function appendItem(p){
      if(!list.querySelector('ul')) list.innerHTML = '<ul></ul>';
      const ul = list.querySelector('ul');
      const li = document.createElement('li');
      li.innerHTML = `<strong>${escapeHtml(p.name)}</strong> — $${fmt(p.price)} <em>${escapeHtml(p.description||'')}</em>`;
      ul.appendChild(li);
    }
    function fmt(v){ const n=Number(v); return Number.isFinite(n) ? n.toFixed(2) : String(v); }
    function escapeHtml(s){ return String(s).replace(/[&<>'"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;',"'":'&#39;','"':'&quot;'}[c])); }

    async function load() {
      const res = await fetch('/api/products');
      const data = await res.json();
      renderList(data);
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const fd = new FormData(form);
      const body = Object.fromEntries(fd.entries());
      // POST creates the product
      const res = await fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      });
      // Immediate UX: append returned product, even before socket broadcast arrives
      if (res.ok) {
        try { appendItem(await res.json()); } catch {}
      }
      form.reset();
    });

    // --- Realtime wiring ---
    const socket = io(); // same-origin
    socket.on('connect', () => statusEl.textContent = 'Live updates: connected');
    socket.on('disconnect', () => statusEl.textContent = 'Live updates: offline');
    // Whenever any client creates a product, server broadcasts it:
    socket.on('product:created', (p) => appendItem(p));

    // Initial load
    load();
  </script>
</body>
</html>
